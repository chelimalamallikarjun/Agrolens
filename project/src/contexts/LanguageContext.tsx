import React, { createContext, useContext, useState, ReactNode } from 'react';

interface Language {
  code: string;
  name: string;
  flag: string;
}

interface LanguageContextType {
  currentLanguage: Language;
  setLanguage: (language: Language) => void;
  translate: (key: string) => string;
}

const languages: Language[] = [
    { code: 'en', name: 'English', flag: 'üá∫üá∏' },
  { code: 'te', name: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å', flag: 'üáÆüá≥' },
  { code: 'hi', name: '‡§π‡§ø‡§Ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
  { code: 'ur', name: 'ÿßÿ±ÿØŸà', flag: 'üáµüá∞' },
  { code: 'kn', name: '‡≤ï‡≤®‡≥ç‡≤®‡≤°', flag: 'üáÆüá≥' },
  { code: 'ta', name: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç', flag: 'üáÆüá≥' },
];

const translations: { [key: string]: { [key: string]: string } } = {
  en: {
    appName: 'AgroLens',
    tagline: 'Smart Farming Assistant for Telangana',
    home: 'Home',
    mandiPrices: 'Mandi Prices',
    weather: 'Weather',
    tips: 'Tips & News',
    schemes: 'Schemes',
    cropScanner: 'Crop Scanner',
    marketplace: 'Marketplace',
    seasonalCrops: 'Seasonal Crops',
    soilAnalysis: 'Soil Analysis',
    welcome: 'Welcome to AgroLens',
    subtitle: 'Your smart farming companion for better yields and profits',
  },
  te: {
    appName: '‡∞Ö‡∞ó‡±ç‡∞∞‡±ã‡∞≤‡±Ü‡∞®‡±ç‡∞∏‡±ç',
    tagline: '‡∞§‡±Ü‡∞≤‡∞Ç‡∞ó‡∞æ‡∞£‡∞ï‡±Å ‡∞∏‡±ç‡∞Æ‡∞æ‡∞∞‡±ç‡∞ü‡±ç ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞∏‡∞π‡∞æ‡∞Ø‡∞ï‡±Å‡∞°‡±Å',
    home: '‡∞π‡±ã‡∞Æ‡±ç',
    mandiPrices: '‡∞Æ‡∞æ‡∞∞‡±ç‡∞ï‡±Ü‡∞ü‡±ç ‡∞ß‡∞∞‡∞≤‡±Å',
    weather: '‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£‡∞Ç',
    tips: '‡∞ö‡∞ø‡∞ü‡±ç‡∞ï‡∞æ‡∞≤‡±Å & ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å',
    schemes: '‡∞™‡∞•‡∞ï‡∞æ‡∞≤‡±Å',
    cropScanner: '‡∞™‡∞Ç‡∞ü ‡∞∏‡±ç‡∞ï‡∞æ‡∞®‡∞∞‡±ç',
    marketplace: '‡∞Æ‡∞æ‡∞∞‡±ç‡∞ï‡±Ü‡∞ü‡±ç‚Äå‡∞™‡±ç‡∞≤‡±á‡∞∏‡±ç',
    seasonalCrops: '‡∞ï‡∞æ‡∞≤‡∞æ‡∞®‡±Å‡∞ó‡±Å‡∞£ ‡∞™‡∞Ç‡∞ü‡∞≤‡±Å',
    soilAnalysis: '‡∞®‡±á‡∞≤ ‡∞µ‡∞ø‡∞∂‡±ç‡∞≤‡±á‡∞∑‡∞£',
    welcome: '‡∞Ö‡∞ó‡±ç‡∞∞‡±ã‡∞≤‡±Ü‡∞®‡±ç‡∞∏‡±ç‚Äå‡∞ï‡±Å ‡∞∏‡±ç‡∞µ‡∞æ‡∞ó‡∞§‡∞Ç',
    subtitle: '‡∞Æ‡±Ü‡∞∞‡±Å‡∞ó‡±à‡∞® ‡∞¶‡∞ø‡∞ó‡±Å‡∞¨‡∞°‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞≤‡∞æ‡∞≠‡∞æ‡∞≤ ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞Æ‡±Ä ‡∞∏‡±ç‡∞Æ‡∞æ‡∞∞‡±ç‡∞ü‡±ç ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞∏‡∞π‡∞ö‡∞∞‡±Å‡∞°‡±Å',
  },
  hi: {
    appName: '‡§è‡§ó‡•ç‡§∞‡•ã‡§≤‡•á‡§Ç‡§∏',
    tagline: '‡§§‡•á‡§≤‡§Ç‡§ó‡§æ‡§®‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§ï‡•É‡§∑‡§ø ‡§∏‡§π‡§æ‡§Ø‡§ï',
    home: '‡§π‡•ã‡§Æ',
    mandiPrices: '‡§Æ‡§Ç‡§°‡•Ä ‡§≠‡§æ‡§µ',
    weather: '‡§Æ‡•å‡§∏‡§Æ',
    tips: '‡§ü‡§ø‡§™‡•ç‡§∏ ‡§î‡§∞ ‡§®‡•ç‡§Ø‡•Ç‡§ú‡§º',
    schemes: '‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç',
    cropScanner: '‡§´‡§∏‡§≤ ‡§∏‡•ç‡§ï‡•à‡§®‡§∞',
    marketplace: '‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡§™‡•ç‡§≤‡•á‡§∏',
    seasonalCrops: '‡§Æ‡•å‡§∏‡§Æ‡•Ä ‡§´‡§∏‡§≤‡•á‡§Ç',
    soilAnalysis: '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£',
    welcome: '‡§è‡§ó‡•ç‡§∞‡•ã‡§≤‡•á‡§Ç‡§∏ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à',
    subtitle: '‡§¨‡•á‡§π‡§§‡§∞ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§î‡§∞ ‡§Æ‡•Å‡§®‡§æ‡§´‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§ï‡•É‡§∑‡§ø ‡§∏‡§æ‡§•‡•Ä',
  }
};

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export function useLanguage() {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
}

interface LanguageProviderProps {
  children: ReactNode;
}

export default function LanguageProvider({ children }: LanguageProviderProps) {
  const [currentLanguage, setCurrentLanguage] = useState<Language>(languages[0]);

  const setLanguage = (language: Language) => {
    setCurrentLanguage(language);
  };

  const translate = (key: string): string => {
    return translations[currentLanguage.code]?.[key] || translations.en[key] || key;
  };

  return (
    <LanguageContext.Provider value={{ currentLanguage, setLanguage, translate }}>
      {children}
    </LanguageContext.Provider>
  );
}

export { languages };